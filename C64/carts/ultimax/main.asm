
        * = $0000

        !if CARTTYPE=0 {
        
        !text "-8000-"
        !fill $1000-6, 0
        !text "-9000-"
        !fill $1000-6, 0
        
        }
        
        !pseudopc $e000 {

    !word start1 - $6000
    !word start1 - $6000
    !byte $c3, $c2, $cd, $38, $30
        
        !text "-E000-"
       
start1:
        ldx #0
-
        lda stub - $6000,x
        sta $0500,x
        inx
        bne -
        jmp $0500
stub:
        !if CARTTYPE = 1 {  ; retro replay
        lda #%00000011      ; ultimax
        sta $de00
        }
        jmp start
start:
        ; Happify CPU ;-)
        sei
        cld
        ldx	#$ff
        txs

        ; we must set data first, then update DDR
        lda #$33
        sta $01
        lda #$2f
        sta $00
        
        lda #'-'
        sta $02
        sta $05
        lda #'z'
        sta $03
        lda #'p'
        sta $04

        ; disable irq sources
        lda #$00
        sta $D01A
        lda #$1F
        sta $DC0D
        sta $DD0D
        ; clear pending irqs
        lda $D019
        sta $D019
        lda $DC0D
        lda $DD0D
        
        lda #$1b
        sta $d011
        
        lda #$13
        sta $d018
        
        lda #$03
        sta $dd00
        
        lda #$c8
        sta $d016
        
        lda #0
        sta $d021
        
        lda #'I'
        sta $d000
        lda #'/'
        sta $d001
        lda #'O'
        sta $d002
        
        ldx #0
-
        lda #1
        sta $d800,x
        sta $d900,x
        sta $da00,x
        sta $db00,x
        lda #$20
        sta $0400,x
        sta $0500,x
        sta $0600,x
        sta $0700,x
        lda characters,x
        sta $0800+$000,x
        eor #$ff
        sta $0800+$400,x
        lda characters,x
        sta $0800+$100,x
        eor #$ff
        sta $0800+$500,x
        lda characters+$100,x
        sta $0800+$200,x
        eor #$ff
        sta $0800+$600,x
        lda characters+$200,x
        sta $0800+$300,x
        eor #$ff
        sta $0800+$700,x
        inx
        bne -
        
--
        ldx #0
-
        lda $0000,x
        sta $0400+(0*40),x
        lda $1000,x
        sta $0400+(1*40),x
        lda $2000,x
        sta $0400+(2*40),x
        lda $3000,x
        sta $0400+(3*40),x
        lda $4000,x
        sta $0400+(4*40),x
        lda $5000,x
        sta $0400+(5*40),x
        lda $6000,x
        sta $0400+(6*40),x
        lda $7000,x
        sta $0400+(7*40),x
        lda $8000,x
        sta $0400+(8*40),x
        lda $9000,x
        sta $0400+(9*40),x
        lda $a000,x
        sta $0400+(10*40),x
        lda $b000,x
        sta $0400+(11*40),x
        lda $c000,x
        sta $0400+(12*40),x
        lda $d000,x
        sta $0400+(13*40),x
        lda $e000,x
        sta $0400+(14*40),x
        lda $f000,x
        sta $0400+(15*40),x
        inx
        cpx #$10
        bne -


        inc $d020
        jmp --

characters:
	!byte	$00, $00, $00, $00, $00, $00, $00, $00
	!byte	$18, $18, $18, $18, $00, $00, $18, $00    ; 33  !
	!byte	$66, $66, $66, $00, $00, $00, $00, $00
	!byte	$66, $66, $FF, $66, $FF, $66, $66, $00
	!byte	$18, $3E, $60, $3C, $06, $7C, $18, $00
	!byte	$62, $66, $0C, $18, $30, $66, $46, $00
	!byte	$3C, $66, $3C, $38, $67, $66, $3F, $00
	!byte	$06, $0C, $18, $00, $00, $00, $00, $00
	!byte	$0C, $18, $30, $30, $30, $18, $0C, $00
	!byte	$30, $18, $0C, $0C, $0C, $18, $30, $00
	!byte	$00, $66, $3C, $FF, $3C, $66, $00, $00
	!byte	$00, $18, $18, $7E, $18, $18, $00, $00
	!byte	$00, $00, $00, $00, $00, $18, $18, $30
	!byte	$00, $00, $00, $7E, $00, $00, $00, $00
	!byte	$00, $00, $00, $00, $00, $18, $18, $00
	!byte	$00, $03, $06, $0C, $18, $30, $60, $00
	!byte	$3C, $66, $6E, $76, $66, $66, $3C, $00
	!byte	$18, $18, $38, $18, $18, $18, $7E, $00
	!byte	$3C, $66, $06, $0C, $30, $60, $7E, $00
	!byte	$3C, $66, $06, $1C, $06, $66, $3C, $00
	!byte	$06, $0E, $1E, $66, $7F, $06, $06, $00
	!byte	$7E, $60, $7C, $06, $06, $66, $3C, $00
	!byte	$3C, $66, $60, $7C, $66, $66, $3C, $00
	!byte	$7E, $66, $0C, $18, $18, $18, $18, $00
	!byte	$3C, $66, $66, $3C, $66, $66, $3C, $00
	!byte	$3C, $66, $66, $3E, $06, $66, $3C, $00
	!byte	$00, $00, $18, $00, $00, $18, $00, $00
	!byte	$00, $00, $18, $00, $00, $18, $18, $30
	!byte	$0E, $18, $30, $60, $30, $18, $0E, $00
	!byte	$00, $00, $7E, $00, $7E, $00, $00, $00
	!byte	$70, $18, $0C, $06, $0C, $18, $70, $00
	!byte	$3C, $66, $06, $0C, $18, $00, $18, $00
	
	; Uppercase
	!byte	$1C, $22, $2E, $2A, $2E, $20, $1C, $00   ; @
	!byte	$18, $3C, $66, $7E, $66, $66, $66, $00   ; A
	!byte	$7C, $66, $66, $7C, $66, $66, $7C, $00   ; B
	!byte	$3C, $66, $60, $60, $60, $66, $3C, $00   ; C
	!byte	$78, $6C, $66, $66, $66, $6C, $78, $00   ; D
	!byte	$7E, $60, $60, $78, $60, $60, $7E, $00   ; E
	!byte	$7E, $60, $60, $78, $60, $60, $60, $00   ; F
	!byte	$3C, $66, $60, $6E, $66, $66, $3C, $00   ; G
	!byte	$66, $66, $66, $7E, $66, $66, $66, $00   ; H
	!byte	$3C, $18, $18, $18, $18, $18, $3C, $00   ; I
	!byte	$1E, $0C, $0C, $0C, $0C, $6C, $38, $00   ; J
	!byte	$66, $6C, $78, $70, $78, $6C, $66, $00   ; K
	!byte	$60, $60, $60, $60, $60, $60, $7E, $00   ; L
	!byte	$63, $77, $7F, $6B, $63, $63, $63, $00   ; M
	!byte	$66, $76, $7E, $7E, $6E, $66, $66, $00   ; N
	!byte	$3C, $66, $66, $66, $66, $66, $3C, $00   ; O
	!byte	$7C, $66, $66, $7C, $60, $60, $60, $00   ; P
	!byte	$3C, $66, $66, $66, $66, $3C, $0E, $00   ; Q
	!byte	$7C, $66, $66, $7C, $78, $6C, $66, $00   ; R
	!byte	$3C, $66, $60, $3C, $06, $66, $3C, $00   ; S
	!byte	$7E, $18, $18, $18, $18, $18, $18, $00   ; T
	!byte	$66, $66, $66, $66, $66, $66, $3C, $00   ; U
	!byte	$66, $66, $66, $66, $66, $3C, $18, $00   ; V
	!byte	$63, $63, $63, $6B, $7F, $77, $63, $00   ; W
	!byte	$66, $66, $3C, $18, $3C, $66, $66, $00   ; X
	!byte	$66, $66, $66, $3C, $18, $18, $18, $00   ; Y
	!byte	$7E, $06, $0C, $18, $30, $60, $7E, $00   ; Z
	!byte	$1C, $10, $10, $10, $10, $10, $1C, $00   ; [
	!byte	$40, $20, $10, $08, $04, $02, $01, $00   ; \ 
	!byte	$1C, $04, $04, $04, $04, $04, $1C, $00   ; ]
	!byte	$08, $14, $22, $00, $00, $00, $00, $00   ; ^
	!byte	$00, $00, $00, $00, $00, $00, $00, $7F   ; _
	; Lower case
	!byte	$10, $08, $00, $00, $00, $00, $00, $00   ; `
	!byte	$00, $00, $3C, $06, $3E, $66, $3E, $00
	!byte	$00, $60, $60, $7C, $66, $66, $7C, $00
	!byte	$00, $00, $3C, $60, $60, $60, $3C, $00
	!byte	$00, $06, $06, $3E, $66, $66, $3E, $00
	!byte	$00, $00, $3C, $66, $7E, $60, $3C, $00
	!byte	$00, $0E, $18, $3E, $18, $18, $18, $00
	!byte	$00, $00, $3E, $66, $66, $3E, $06, $7C
	!byte	$00, $60, $60, $7C, $66, $66, $66, $00
	!byte	$00, $18, $00, $38, $18, $18, $3C, $00
	!byte	$00, $06, $00, $06, $06, $06, $06, $3C
	!byte	$00, $60, $60, $6C, $78, $6C, $66, $00
	!byte	$00, $38, $18, $18, $18, $18, $3C, $00
	!byte	$00, $00, $66, $7F, $7F, $6B, $63, $00
	!byte	$00, $00, $7C, $66, $66, $66, $66, $00
	!byte	$00, $00, $3C, $66, $66, $66, $3C, $00
	!byte	$00, $00, $7C, $66, $66, $7C, $60, $60
	!byte	$00, $00, $3E, $66, $66, $3E, $06, $06
	!byte	$00, $00, $7C, $66, $60, $60, $60, $00
	!byte	$00, $00, $3E, $60, $3C, $06, $7C, $00
	!byte	$00, $18, $7E, $18, $18, $18, $0E, $00
	!byte	$00, $00, $66, $66, $66, $66, $3E, $00
	!byte	$00, $00, $66, $66, $66, $3C, $18, $00
	!byte	$00, $00, $63, $6B, $7F, $3E, $36, $00
	!byte	$00, $00, $66, $3C, $18, $3C, $66, $00
	!byte	$00, $00, $66, $66, $66, $3E, $0C, $78
	!byte	$00, $00, $7E, $0C, $18, $30, $7E, $00
	!byte	$0C, $10, $10, $20, $10, $10, $0C, $00   ; {
	!byte	$08, $08, $08, $08, $08, $08, $08, $00   ; |
	!byte	$30, $08, $08, $04, $08, $08, $30, $00   ; }
	!byte	$00, $00, $30, $49, $06, $00, $00, $00   ; ~
	!byte	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF    ; $7F  127  Solid block
	!byte	$00, $00, $00, $00, $00, $00, $00, $00
}
        !if CARTTYPE=0 {
        * = $3000
        !text "-F000-"
        * = $3ffa
        !word start
        !word start
        !word start
         
        !fill $2000, 0
        }
        
        !if CARTTYPE=1 {
        * = $1000
        !text "-F000-"
        * = $1ffa
        !word start
        !word start
        !word start
        }
        
